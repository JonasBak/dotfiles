call plug#begin('~/.vim/plugged')

Plug 'ctrlpvim/ctrlp.vim'                 "Fuzzyfinder
Plug 'itchyny/lightline.vim'              "Statusline
Plug 'itchyny/vim-gitbranch'              "Git branch in lightline
Plug 'scrooloose/nerdtree'                "document tree
Plug 'Xuyuanp/nerdtree-git-plugin'        "git flags
Plug 'romainl/apprentice'
Plug 'sheerun/vim-polyglot'               "Language pack
Plug 'ervandew/supertab'
Plug 'haya14busa/incsearch.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale'

call plug#end()

set rtp+=~/.fzf 

let g:ackprg = 'ag --nogroup --nocolor --column'

set updatetime=500

" General settings
syntax on
set encoding=utf8
set number
set ttimeoutlen=10         "used for key code delays
set scrolloff=10
set mouse=a
set nowrap
set noswapfile             "no stupid .swp file
set ignorecase

" Indent option, 4 spaces, also for tabs
filetype indent on
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab

" Tab navigation
noremap <C-l> :tabnext<CR>
noremap <C-h> :tabprevious<CR>
noremap <C-t> :tabnew<CR>

" Go to end of line
inoremap <C-e> <C-o>A

" No arrow keys for navigation
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Autoclosing
inoremap (( ()<left>
inoremap [[ []<left>
inoremap << <><left>
inoremap {{ {}<left>
inoremap "" ""<left>
inoremap '' ''<left>
inoremap `` ``<left>

inoremap (<cr> (<cr>)<esc>O
inoremap {<cr> {<cr>}<esc>O
inoremap [<cr> [<cr>]<esc>O

nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

noremap <C-c> :!echo <C-r><C-w>\| xsel -ib<cr><cr>
vnoremap <C-c> :w !xsel -ib<cr><cr>
" Plugin config

" CTRLP .ignore files/folders
" let g:ctrlp_max_files = 0
" noremap <M-p> :CtrlPBuffer<CR>
set wildignore+=*/venv/*,*/target/*,*/node_modules/*

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Statusline config
set laststatus=2
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name'
      \ },
      \ }

" NERDTree config
noremap <C-n> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeShowHidden= 1
let g:NERDTreeWinSize = 25

" Colorscheme
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
""If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)

if (empty($TMUX))
    if (has("nvim"))
            "For Neovim 0.1.3 and 0.1.4 <
            "https://github.com/neovim/neovim/pull/2198 >
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    "For Neovim > 0.1.5 and Vim > patch 7.4.1799 <https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162>
    "Based on Vim patch 7.4.1770 (`guicolors` option) <https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd>
    " <https://github.com/neovim/neovim/wiki/Following-HEAD#20160511>
    if (has("termguicolors"))
        set termguicolors
    endif
endif

silent! colorscheme apprentice

" YCM
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>

hi ALEErrorSign ctermfg=1
hi ALEwarningSign ctermfg=3

let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'

let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config=1
let g:ale_cpp_clang_options = '-std=c++14'
let g:ale_fixers = {
            \   'javascript': ['prettier'],
            \   'css': ['prettier'],
            \   'c': ['clang-format'],
            \   'python': ['yapf', 'isort'],
            \   'java': ['google_java_format'],
            \   'rust': ['rustfmt'],
            \   'c++': ['clang-format'],
            \   'sh': ['shfmt']
            \}

let g:ale_linters = {
            \ 'go': ['gometalinter', 'gofmt'],
            \ 'cpp': [ 'clang', 'clangtidy', 'cppcheck', 'cpplint', 'gcc' ],
            \ 'rust': ['rustfmt', 'rustc'],
            \ 'javascript': ['eslint', 'flow','prettier'],
            \ 'css': ['stylelint', 'prettier'],
            \ 'python': ['pycodestyle', 'flake8'],
            \ 'graphql': ['prettier', 'eslint'],
            \}
