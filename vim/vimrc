call plug#begin('~/.vim/plugged')

" Search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'haya14busa/incsearch.vim'

" Linting
Plug 'w0rp/ale'

" Navigation
Plug 'scrooloose/nerdtree'

" Git
Plug 'itchyny/vim-gitbranch'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'

" Visual
Plug 'itchyny/lightline.vim'
Plug 'romainl/apprentice'
Plug 'sheerun/vim-polyglot'

call plug#end()

set rtp+=~/.fzf

let g:ackprg = 'ag --nogroup --nocolor --column'

" General settings
set updatetime=500

set nocompatible

let mapleader = " "

syntax on
set encoding=utf8
set number
set ttimeoutlen=10
set scrolloff=10
set mouse=a
set noswapfile
set ignorecase

set lazyredraw

" Indent option
filetype indent on
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab

" Tab navigation
noremap <C-l> :tabnext<CR>
noremap <C-h> :tabprevious<CR>
noremap <C-t> :tabnew<CR>

" No arrow keys for navigation
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Autoclosing
inoremap (( ()<left>
inoremap [[ []<left>
inoremap << <><left>
inoremap {{ {}<left>

inoremap (<cr> (<cr>)<esc>O
inoremap {<cr> {<cr>}<esc>O
inoremap [<cr> [<cr>]<esc>O

nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Completion
source $DOTFILES/vim/scripts/completion.vim

" Tags
source $DOTFILES/vim/scripts/tags.vim

" Clipboard
nnoremap <C-c> :!echo <C-r><C-w>\| xclip<cr><cr>
vnoremap <C-c> :w !xclip<cr><cr>
nnoremap <leader>v :r !xclip -o 2> /dev/null<cr>
set pastetoggle=<F2>

nnoremap <leader>? :help <c-r><c-w><cr>

nnoremap <leader><leader> :noh<cr>

" Plugin config
nnoremap <expr> <leader>1 (len(system('git rev-parse --abbrev-ref HEAD 2> /dev/null')) ? ':GFiles' : ':Files')."\<cr>"
nnoremap <leader>2 :Ag<cr>
nnoremap <leader>3 :Ag <C-r><C-w><cr>
nnoremap <leader>4 :GFiles?<cr>

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Statusline config
set noshowmode
set laststatus=2
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'filename', 'modified' ] ],
      \   'right': [ ['lineinfo'], ['percent'] ]
      \ },
      \ 'component_function': {
      \   'mode': 'WrappedMode',
      \   'paste': 'WrappedPaste',
      \   'gitbranch': 'WrappedGitBranch',
      \   'filename': 'WrappedFilename',
      \   'modified': 'WrappedModified',
      \   'lineinfo': 'WrappedLineInfo',
      \   'percent': 'WrappedPercent'
      \ },
      \ }

source $DOTFILES/vim/scripts/lightline_functions.vim

" NERDTree config
noremap <C-n> :NERDTreeToggle<CR>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeShowHidden= 1
let g:NERDTreeWinSize = 25

" Colorscheme
if (empty($TMUX))
    if (has("nvim"))
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    if (has("termguicolors"))
        set termguicolors
    endif
endif

silent! colorscheme apprentice
hi VertSplit ctermbg=234 ctermfg=234
hi StatusLineNC ctermbg=234 ctermfg=234
hi StatusLine ctermbg=234 ctermfg=234

hi ALEErrorSign ctermfg=1
hi ALEwarningSign ctermfg=3

let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'

let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config=1
let g:ale_rust_cargo_use_check = 1
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \   'javascript': ['prettier'],
      \   'css': ['prettier'],
      \   'c': ['clang-format'],
      \   'python': ['yapf', 'isort'],
      \   'java': ['google_java_format'],
      \   'rust': ['rustfmt'],
      \   'c++': ['clang-format'],
      \   'sh': ['shfmt']
      \}

let g:ale_linters = {
      \ 'go': ['gometalinter', 'gofmt'],
      \ 'cpp': [ 'clang', 'clangtidy', 'cppcheck', 'cpplint', 'gcc' ],
      \ 'rust': ['cargo', 'rls', 'rustc'],
      \ 'javascript': ['eslint', 'flow','prettier'],
      \ 'css': ['stylelint', 'prettier'],
      \ 'python': ['pycodestyle', 'flake8'],
      \ 'graphql': ['prettier', 'eslint'],
      \ 'c': ['clang-format'],
      \}
